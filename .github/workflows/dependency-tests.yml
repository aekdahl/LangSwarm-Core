name: Dependency Update and Compatibility Test

on:
  workflow_dispatch: # Manual trigger

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"] # Python versions to test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Required Python Packages
      run: pip install requests packaging

    - name: Run Dependency Update Test
      run: python dependency_update_test.py ${{ matrix.python-version }}

    - name: Sync with Main (Retry with Exponential Backoff)
      run: |
        MAX_RETRIES=5
        INITIAL_WAIT=$((1 + RANDOM % 10))  # Random initial wait between 1-10 seconds

        for ((i=1; i<=MAX_RETRIES; i++)); do
          echo "Attempt $i to sync with main..."
          
          # Fetch latest changes
          git fetch origin main
          
          # Try to merge
          if git merge origin/main; then
            echo "Merge successful on attempt $i."
            break
          fi

          # Resolve conflicts if merge fails
          if grep -q "<<<<<<<" requirements.txt; then
            echo "Conflict detected in requirements.txt. Resolving..."
            python resolve_conflicts.py requirements.txt
            git add requirements.txt
            git commit -m "Resolve merge conflict by merging Python versions"
            git merge --continue || echo "Continuing after conflict resolution."
          fi

          # Push resolved changes
          git push origin main || echo "Push failed. Retrying..."
          
          # Calculate exponential backoff wait time
          WAIT_TIME=$((INITIAL_WAIT * 2 ** (i - 1)))  # Exponential backoff: 1x, 2x, 4x, ...
          MAX_WAIT=60  # Optional: Set a cap on the maximum wait time
          if [ $WAIT_TIME -gt $MAX_WAIT ]; then
            WAIT_TIME=$MAX_WAIT
          fi

          # Wait before the next retry
          if [ $i -lt $MAX_RETRIES ]; then
            echo "Waiting for $WAIT_TIME seconds before retrying..."
            sleep $WAIT_TIME
          fi

          # If this is the last attempt and it still fails, exit with error
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to sync with main after $MAX_RETRIES attempts."
            exit 1
          fi
        done

    - name: Commit Updated Requirements
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "actions@github.com"
        git add requirements.txt
        git commit -m "Update requirements.txt with supported Python versions" || echo "No changes to commit"

    - name: Push Changes
      run: git push origin main || echo "Push final changes failed. Check logs."
